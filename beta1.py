#-----------------04.12.23
#-----------------rabotaet cmeste s shablonom i tmn rm 14
import os
import re
import openai
import telebot
import time
import docx
from docx.shared import Pt
from docx import Document
import chardet


bot = telebot.TeleBot('6786106072:AAGz8bE4mNyJscUDrvARjYiXOCAyX5FukD4')
openai.api_key = ""


@bot.message_handler(content_types=["text"]) 
def handle_text(message):
    bot.send_message(message.chat.id, 'Идёт генерация дождитесь ответа............')  
    model_engine = "gpt-3.5-turbo"
    with open('1.txt', 'w') as file:
        file.write('')
    with open('2.txt', 'w') as file:
        file.write('')
    text = message.text
    ex = "=================================================="
    sod = "СОДЕРЖАНИЕ"
    
    #=====гл запрос======================================================
    #=====гл запрос======================================================
    #=====гл запрос======================================================
    #=====гл запрос======================================================
    time.sleep(367)
    ll2 = ""
    prompt = "составь мне план (структуру) для моего доклада на тему (" + text + ") план должен состоять из шести глав ,а главы должны состоять из двух под глав, в ответ ты должен записать только название глав и название подглав к ним без каких либо твоих пояснений и дополнений , не забудь пронумеровать главы вот так (1, 2, 3, 4, 5, 6) , а под главы пронумеруй так (1.1 1.2, 2.1 2.2 , 3.1 3.2, 4.1 4.2, 5.1 5.2 , 6.1 6.2) , Первая глава и подглавы 1.1 и 1.2 должны быть вводной частью данного доклада и состоять из актуальности рассматриваемой темы и её проблематики, а шестая глава и подглавы 6.1 6.2 должны быть заключением данного доклада и подводить итоги"
    response = openai.ChatCompletion.create(
        model=model_engine,
        messages=[
            {"role": "system", "content": "You are a helpful assistant."},
            {"role": "user", "content": prompt}
        ]
    )
    if response['choices']:
        ll2 = response['choices'][0]['message']['content']
    print(ll2)
    time.sleep(367)
    #================СОЗДАНИЕ ВЫСШЕГО ВОПРОСА===========================================
    #================СОЗДАНИЕ ВЫСШЕГО ВОПРОСА===========================================
    #================СОЗДАНИЕ ВЫСШЕГО ВОПРОСА===========================================
    #================СОЗДАНИЕ ВЫСШЕГО ВОПРОСА===========================================






    #===гл сап=============СОЗДАНИЕ ВЫСШЕГО ВОПРОСА===========================================
    #===гл сап=============СОЗДАНИЕ ВЫСШЕГО ВОПРОСА===========================================
    #===гл сап=============СОЗДАНИЕ ВЫСШЕГО ВОПРОСА===========================================
    #===гл сап=============СОЗДАНИЕ ВЫСШЕГО ВОПРОСА===========================================
    print("-------------------------------------------------------------------------------3222222222222")
    ll6q1 = ""
    prompt = "напиши очень подробно что нужно раскрыть, написать в данном реферате (" + text + ll2 +") так чтобы реферат был содержательным и взаимосвязанным напиши только 15 ключевых аспектов, каждый аспект распиши подробно. Не забудь пронумеровать главы вот так (1, 2, 3, 4, 5, 6) , а под главы пронумеруй так (1.1 1.2, 2.1 2.2 , 3.1 3.2, 4.1 4.2, 5.1 5.2 , 6.1 6.2) глав и подглав должно быть ровно столько сколько я тебе дал"
    response = openai.ChatCompletion.create(
        model=model_engine,
        messages=[
            {"role": "system", "content": "You are a helpful assistant."},
            {"role": "user", "content": prompt}
        ]
    )
    if response['choices']:
        ll6q1 = response['choices'][0]['message']['content']
    print(ll6q1)
    with open("1.txt", "w", encoding='utf-8') as file:
        file.write(ll6q1)
    time.sleep(365)
    print("-------------------------------------------------------------------------------3222222222222")
    #================СОЗДАНИЕ ВЫСШЕГО ВОПРОСА===========================================
    #================СОЗДАНИЕ ВЫСШЕГО ВОПРОСА===========================================
    #================СОЗДАНИЕ ВЫСШЕГО ВОПРОСА===========================================
    #3================СОЗДАНИЕ ВЫСШЕГО ВОПРОСА==========================================
    
    
    
    
    
    filename = '1.txt'
    with open('1.txt', 'r', encoding='utf-8') as file:
        lines = file.readlines()
    cleaned_lines = []
    found_digit = False
    for line in lines:
        # Проверяем, содержит ли строка хотя бы одну цифру
        if any(char.isdigit() for char in line):
            found_digit = True
        # Если уже встретили цифру, прекращаем очистку строк
        if found_digit:
            cleaned_lines.append(line)
    # Записываем очищенные строки обратно в файл
    with open('1.txt', 'w', encoding='utf-8') as file:
        file.writelines(cleaned_lines)
    time.sleep(3)
    # Открываем файл для чтения
    with open('1.txt', 'r', encoding='utf-8') as file:
        # Инициализируем переменные
        current_variable = ""
        ww_vars = []
        # Читаем файл построчно
        for line in file:
            # Проверяем, содержит ли строка цифру
            if any(char.isdigit() for char in line):
                # Если переменная не пуста, сохраняем ее в список переменных
                if current_variable:
                    ww_vars.append(current_variable)
                # Создаем новую переменную и добавляем текущую строку с цифрой
                current_variable = line
            else:
                # Добавляем текущую строку с текстом к текущей переменной
                current_variable += line
        # Добавляем последнюю переменную в список (если она не пуста)
        if current_variable:
            ww_vars.append(current_variable)
    # Выводим результат
    for i, variable in enumerate(ww_vars, 1):
        print(f"ww_vars[{i-1}]:\n{variable}")
    print(ww_vars[0])
    print(ww_vars[1])
    print(ww_vars[2])
    print(ww_vars[3])
    
    
    time.sleep(3)
    #--6.2-очистить-что-после--через переменнную
    # Предположим, что ww_vars[17] - это строка данных
    ww_vars_17 = ww_vars[17]
    # Разделение строки на список строк
    lines = ww_vars_17.split('\n')
    # Ищем строку с числом 6.2
    index_of_6_2 = None
    for i, line in enumerate(lines):
        if "6.2" in line:
            index_of_6_2 = i
            break
    # Если нашли строку с 6.2, ищем пустую строку после нее
    if index_of_6_2 is not None:
        for i in range(index_of_6_2 + 1, len(lines)):
            if not lines[i].strip():
                # Нашли пустую строку, удаляем все строки после нее
                lines = lines[:i]
                break
    # Собираем строки обратно в одну строку
    result17 = '\n'.join(lines)
    # Выводим результат
    print(result17)
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    #####1гл   #####################################################
    #####1гл   #####################################################
    #####1гл   #####################################################
    print("-------------------------------------------------------------------------------2222222222222")
    ll4 = ""
    prompt2 ="расскажи по подробнее про (" + ww_vars[0] + ww_vars[1] + ww_vars[2] + ") , ответ должен быть расписан очень подробно и расказывать всю суть , по надобности приводить примеры того или иного, ответ дай в стиле реферата ,то есть ответ должен представлять чать реферата "
    response = openai.ChatCompletion.create(
        model=model_engine,
        messages=[
            {"role": "system", "content": "You are a helpful assistant."},
            {"role": "user", "content": prompt2}
        ]
    )
    if response['choices']:
        ll4 = response['choices'][0]['message']['content']
    print(ll4)
    time.sleep(366)
    print("-------------------------------------------------------------------------------222222222222")
    ##########################################################
    ##########################################################
    ##########################################################





    #####2гл   #####################################################
    #####2гл   #####################################################
    #####2гл   #####################################################
    print("-------------------------------------------------------------------------------2222222222222")
    ll5 = ""
    prompt2 ="расскажи по подробнее про (" + ww_vars[3] + ww_vars[4] + ww_vars[5] + ") , ответ должен быть расписан очень подробно и расказывать всю суть , по надобности приводить примеры того или иного, ответ дай в стиле реферата ,то есть ответ должен представлять чать реферата "
    response = openai.ChatCompletion.create(
        model=model_engine,
        messages=[
            {"role": "system", "content": "You are a helpful assistant."},
            {"role": "user", "content": prompt2}
        ]
    )
    if response['choices']:
        ll5 = response['choices'][0]['message']['content']
    print(ll5)
    time.sleep(366)
    print("-------------------------------------------------------------------------------222222222222")
    ##########################################################
    ##########################################################
    ##########################################################
    
    
    
    
    
    #####3гл   #####################################################
    #####3гл   #####################################################
    #####3гл   #####################################################
    print("-------------------------------------------------------------------------------2222222222222")
    ll6 = ""
    prompt2 ="расскажи по подробнее про (" + ww_vars[6] + ww_vars[7] + ww_vars[8] + ") , ответ должен быть расписан очень подробно и расказывать всю суть , по надобности приводить примеры того или иного, ответ дай в стиле реферата ,то есть ответ должен представлять чать реферата "
    response = openai.ChatCompletion.create(
        model=model_engine,
        messages=[
            {"role": "system", "content": "You are a helpful assistant."},
            {"role": "user", "content": prompt2}
        ]
    )
    if response['choices']:
        ll6 = response['choices'][0]['message']['content']
    print(ll6)
    time.sleep(366)
    print("-------------------------------------------------------------------------------222222222222")
    ##########################################################
    ##########################################################
    ##########################################################
    
    
    
    
    #####4гл   #####################################################
    #####4гл   #####################################################
    #####4гл   #####################################################
    print("-------------------------------------------------------------------------------2222222222222")
    ll7 = ""
    prompt2 ="расскажи по подробнее про (" + ww_vars[9] + ww_vars[10] + ww_vars[11] + ") , ответ должен быть расписан очень подробно и расказывать всю суть , по надобности приводить примеры того или иного, ответ дай в стиле реферата ,то есть ответ должен представлять чать реферата "
    response = openai.ChatCompletion.create(
        model=model_engine,
        messages=[
            {"role": "system", "content": "You are a helpful assistant."},
            {"role": "user", "content": prompt2}
        ]
    )
    if response['choices']:
        ll7 = response['choices'][0]['message']['content']
    print(ll7)
    time.sleep(366)
    print("-------------------------------------------------------------------------------222222222222")
    ##########################################################
    ##########################################################
    ##########################################################
    
    
    
    
    
    #####5гл   #####################################################
    #####5гл   #####################################################
    #####5гл   #####################################################
    print("-------------------------------------------------------------------------------2222222222222")
    ll8 = ""
    prompt2 ="расскажи по подробнее про (" + ww_vars[12] + ww_vars[13] + ww_vars[14] + ") , ответ должен быть расписан очень подробно и расказывать всю суть , по надобности приводить примеры того или иного, ответ дай в стиле реферата ,то есть ответ должен представлять чать реферата "
    response = openai.ChatCompletion.create(
        model=model_engine,
        messages=[
            {"role": "system", "content": "You are a helpful assistant."},
            {"role": "user", "content": prompt2}
        ]
    )
    if response['choices']:
        ll8 = response['choices'][0]['message']['content']
    print(ll8)
    time.sleep(366)
    print("-------------------------------------------------------------------------------222222222222")
    ##########################################################
    ##########################################################
    ##########################################################
    
    
    
    
    
    #####6гл   #####################################################
    #####6гл   #####################################################
    #####6гл   #####################################################
    print("-------------------------------------------------------------------------------2222222222222")
    ll9 = ""
    prompt2 ="расскажи по подробнее про (" + ww_vars[15] + ww_vars[16] + result17 + ") , ответ должен быть расписан очень подробно и расказывать всю суть , по надобности приводить примеры того или иного, ответ дай в стиле реферата ,то есть ответ должен представлять чать реферата "
    response = openai.ChatCompletion.create(
        model=model_engine,
        messages=[
            {"role": "system", "content": "You are a helpful assistant."},
            {"role": "user", "content": prompt2}
        ]
    )
    if response['choices']:
        ll9 = response['choices'][0]['message']['content']
    print(ll9)
    time.sleep(366)
    print("-------------------------------------------------------------------------------222222222222")
    ##########################################################
    ##########################################################
    ##########################################################
    
    
    
    chapter_pattern = re.compile(r"^(\d+\.\s+[\w\s]+)")
    subchapter_pattern = re.compile(r"^\d+\.\d+")
    def add_dots(text):
        new_text = ""
        for line in text.split("\n"):
            if re.match(chapter_pattern, line) or re.match(subchapter_pattern, line):
                new_text += line + "." * (50 - len(line)) + "\n"
            else:
                new_text += line + "\n"
        return new_text
    ll2_with_dots = add_dots(ll2)
    ll2 = ll2_with_dots

    
    
    # Список переменных для записи в файл
    variables_to_write = [ex, sod, ll2, ex, ll4, ll5, ll6, ll7, ll8, ll9]
    # Открываем файл для записи с кодировкой UTF-8
    with open('2.txt', 'w', encoding='utf-8') as file:
        for i, variable in enumerate(variables_to_write):
            # Записываем содержимое переменной
            file.write(variable)

            # Добавляем пустую строку после каждой переменной, кроме последней
            if i < len(variables_to_write) - 1:
                file.write('\n\n\n')
    
    
    
    # Открываем файлы с явным указанием кодировки (в данном случае UTF-8)
    with open('2.txt', 'rb') as file:
        result = chardet.detect(file.read())
    # Открываем файлы с определенной кодировкой
    with open('2.txt', 'r', encoding=result['encoding']) as file:
        text = file.read()
    # Добавляем текст в документ
    doc = Document('shablon.docx')
    doc.add_paragraph(text)
    # Сохраняем изменения
    doc.save('shablonDOP.docx')
    # Открываем документ с добавленным текстом
    document = docx.Document('shablonDOP.docx')
    # Изменяем стиль по умолчанию для всего документа
    for paragraph in document.paragraphs:
        for run in paragraph.runs:
            font = run.font
            font.name = 'Times New Roman'
            font.size = Pt(14)
    # Сохраняем документ с изменениями шрифта
    document.save('REFERAT.docx')
    print('Шрифт в файле успешно изменен на Times New Roman 14pt')
    
    
    
    print("Содержимое переменных записано в файл 2.txt с использованием кодировки UTF-8")
    bot.send_document(message.chat.id, open('REFERAT.docx', 'rb'))
    time.sleep(3)
        
    file_path = "shablonDOP.docx"
    try:
        os.remove(file_path)
        print(f"Файл {file_path} успешно удален.")
    except FileNotFoundError:
        print(f"Файл {file_path} не найден.")
    except Exception as e:
        print(f"Произошла ошибка при удалении файла: {e}")
    ##########################################################
    ##########################################################
    file_path = "REFERAT.docx"
    try:
        os.remove(file_path)
        print(f"Файл {file_path} успешно удален.")
    except FileNotFoundError:
        print(f"Файл {file_path} не найден.")
    except Exception as e:
        print(f"Произошла ошибка при удалении файла: {e}")


    bot.send_message(message.chat.id, 'Следующая генерация будет доступна через 5 мин')
bot.polling(none_stop=True, interval=0)
#-----------------04.12.23
#-----------------rabotaet cmeste s shablonom i tmn rm 14


#
